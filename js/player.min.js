'use strict';

// Insert the JS-API on the site
var tag = document.createElement('script');
tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

/**
 * Player Object
 */
var Player = {

  YTPlayer: undefined,
  update: undefined,

  /**
   * Gets fired when the YT Player is Loaded
   */
  onReady: function onReady(event) {
    console.log("PLAYER IS LOADED");
    var player = event.target;
    $("#meta-information").text(player.getVideoData().title);

    //Display time
    var duration = Player.formatTime(player.getDuration());
    $('#duration').text(duration);
    $("#time-elapsed").text("00:00");
    Player.play();

    //Add event listeners for the gui

    Player.update = setInterval(Player.updateTime, 1000);
    $("#play").on("click", Player.changeVideoState);
  },

  /**
   * Gets called when
   */
  onStateChange: function onStateChange(event) {
    var player = event.target;

    console.log("State changed to: ", player.getPlayerState());
  },

  /**
   * Switches between playing and pausing
   */
  changeVideoState: function changeVideoState() {
    if (Player.YTPlayer.getPlayerState() == YT.PlayerState.PLAYING) {
      Player.pause();
    } else {
      Player.play();
    }
  },

  /**
   * Formats the seconds in the style mm:ss
   * @param {number} seconds
   * @return {string} The formatted time as string
   */
  formatTime: function formatTime(seconds) {
    seconds = Math.round(seconds);
    var minutes = Math.floor(seconds / 60);
    seconds = seconds - minutes * 60;
    var time = Player.str_pad_left(minutes, '0', 2) + ':' + Player.str_pad_left(seconds, '0', 2);
    return time;
  },

  /**
   * This function is used to update the time correctly
   * @return {[type]} [description]
   */
  updateTime: function updateTime() {
    console.log("Updating Time");
    var currentTime = Player.formatTime(Player.YTPlayer.getCurrentTime());
    $("#time-elapsed").text(currentTime);
  },

  /**
   * Start/continue playback of video
   */
  play: function play() {
    $("#play .icon").removeClass("fa-play");
    $("#play .icon").addClass("fa-pause");
    Player.YTPlayer.playVideo();
  },

  /**
   * Pause the playback of the video
   */
  pause: function pause() {
    $("#play .icon").removeClass("fa-pause");
    $("#play .icon").addClass("fa-play");
    Player.YTPlayer.pauseVideo();
  },

  loadVideoById: function loadVideoById(id) {
    Player.YTPlayer.loadVideoByid(id);
  },

  /**
   * Used the pad the time correctly
   */
  str_pad_left: function str_pad_left(string, pad, length) {
    return (new Array(length + 1).join(pad) + string).slice(-length);
  },

  loadVideo: function loadVideo() {
    console.log("LOADING VIDEO");
    Player.clearPlayer();
    Player.YTPlayer = new YT.Player('player', {
      height: 1,
      width: 1,
      videoId: $("#searchField").val(),
      events: {
        'onReady': Player.onReady,
        'onStateChange': Player.onStateChange
      }
    });
    console.log("object created");
  },

  clearPlayer: function clearPlayer() {
    console.log("CLEARING VIDEO");
    if (Player.YTPlayer !== undefined && Player.YTPlayer !== null) {
      Player.YTPlayer.stopVideo();
      Player.YTPlayer.clearVideo();
    }

    //Remove Event Listener
    $("#play").unbind("click");

    //Recreate player div
    $("#player").replaceWith("<div id='player'></div>");

    clearInterval(Player.update);
    Player.update = undefined;
    Player.YTPlayer = undefined;
  }
};

//Create the player object if API is ready
function onYouTubeIframeAPIReady() {
  console.log("API ready");

  $("#searchButton").on("click", Player.loadVideo);
}